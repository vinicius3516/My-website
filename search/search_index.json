{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"DevOps Engineer <p>Este portf\u00f3lio \u00e9 o reflexo do meu dia a dia como profissional DevOps: aqui voc\u00ea encontrar\u00e1    anota\u00e7\u00f5es t\u00e9cnicas, boas pr\u00e1ticas, automa\u00e7\u00f5es com ferramentas como Docker, Kubernetes, GitHub Actions e mais.    Tudo que aprendo, aplico e compartilho.</p>"},{"location":"#saiba-mais","title":"Saiba Mais","text":""},{"location":"#sobre-mim","title":"Sobre mim","text":"<p>Ol\u00e1! Sou Vinicius Costa, DevOps Engineer com 2 anos de experi\u00eancia em tornar ciclos de desenvolvimento e implanta\u00e7\u00e3o mais \u00e1geis, seguros e escal\u00e1veis. Sou movido por desafios t\u00e9cnicos e pela melhoria cont\u00ednua dos processos de entrega de software. Minha expertise inclui:</p> <ul> <li>Implementa\u00e7\u00e3o de pipelines CI/CD (GitLab, Jenkins, GitHub Actions)</li> <li>Orquestra\u00e7\u00e3o de containers com Kubernetes e Docker</li> <li>Infraestrutura como c\u00f3digo (Terraform, Ansible)</li> <li>Monitoramento com Prometheus e Grafana</li> </ul>"},{"location":"#certificacoes","title":"Certifica\u00e7\u00f5es","text":"AWS Cloud Practitioner <p>Amazon Web Services</p> <p>Emitida: Mai 2025</p> Ver Credencial AWS SAA - C03 <p>Amazon Web Services</p> <p>Em andamento...</p> Ver Credencial Kubernetes <p>DevOps-Pro</p> <p>Emitida: Abr 2025</p> Ver Credencial Docker <p>DevOps-Pro</p> <p>Emitida: Fev 2025</p> Ver Credencial Linux <p>DevOps-Pro</p> <p>Emitida: Jan 2025</p> Ver Credencial GitHub Actions <p>DevOps-Pro</p> <p>Em andamento...</p> Ver Credencial"},{"location":"#projetos","title":"Projetos","text":"Em andamento Ver Projeto Em andamento Ver Projeto Em andamento Ver Projeto"},{"location":"#faq","title":"FAQ","text":"Por que voc\u00ea criou este site?    Para documentar meu aprendizado em DevOps, organizar minhas anota\u00e7\u00f5es e compartilhar conhecimento com outros profissionais da \u00e1rea.    Posso usar esse conte\u00fado?    Sim! Todo o conte\u00fado \u00e9 aberto. Sinta-se \u00e0 vontade para estudar, compartilhar ou at\u00e9 sugerir melhorias.    Voc\u00ea est\u00e1 aberto a oportunidades?    Sim! Estou sempre aberto a novos desafios profissionais na \u00e1rea de DevOps e Cloud. Entre em contato pelos canais no final da p\u00e1gina.    Com quais ferramentas voc\u00ea trabalha no dia a dia?    Costumo utilizar Docker, Kubernetes, Terraform, GitHub Actions, al\u00e9m de ferramentas de monitoramento como Prometheus e Grafana."},{"location":"#contato","title":"Contato","text":"LinkedIn <p>Conecte-se profissionalmente</p> WhatsApp <p>Entre em contato diretamente</p> GitHub <p>Veja meus projetos e contribui\u00e7\u00f5es</p> E-mail <p>Entre em contato comigo por e-mail</p> <p>\u00a9 2025 Vinicius Costa. Todos os direitos reservados.</p>"},{"location":"docker/comandos/","title":"Conteudo em breve!!!","text":""},{"location":"git-github/comandos/","title":"Documenta\u00e7\u00e3o Git &amp; GitHub","text":"<p>Este guia cont\u00e9m os principais comandos Git utilizados no dia a dia de um DevOps, com descri\u00e7\u00e3o, uso pr\u00e1tico, finalidade, cen\u00e1rios comuns e melhores pr\u00e1ticas.</p>"},{"location":"git-github/comandos/#indice-remissivo","title":"\u00cdndice Remissivo","text":"<ul> <li>Comandos Essenciais</li> <li>Gerenciamento de Branches</li> <li>Trabalhando com Altera\u00e7\u00f5es</li> <li>Sincroniza\u00e7\u00e3o com Remoto</li> <li>Corre\u00e7\u00f5es e Hist\u00f3rico</li> <li>Workflow DevOps</li> <li>Comandos Avan\u00e7ados</li> <li>Boas Pr\u00e1ticas DevOps</li> <li>Integra\u00e7\u00e3o com Ferramentas DevOps</li> </ul>"},{"location":"git-github/comandos/#comandos-essenciais","title":"Comandos Essenciais","text":""},{"location":"git-github/comandos/#git-init","title":"git init","text":"<p>Descri\u00e7\u00e3o: Inicia o git no repositorio.</p> <pre><code>git init\n</code></pre>"},{"location":"git-github/comandos/#git-clone","title":"git clone","text":"<p>Descri\u00e7\u00e3o: Clona um reposit\u00f3rio remoto para sua m\u00e1quina local.</p> <pre><code>git clone git@github.com:user/repo.git\n</code></pre>"},{"location":"git-github/comandos/#git-status","title":"git status","text":"<p>Descri\u00e7\u00e3o: Exibe estado do diret\u00f3rio de trabalho e \u00e1rea de staging.</p> <pre><code>git status\n</code></pre> <p>Finalidade: Verificar altera\u00e7\u00f5es pendentes e estado atual Cen\u00e1rio: Antes de iniciar novas modifica\u00e7\u00f5es</p>"},{"location":"git-github/comandos/#gerenciamento-de-branches","title":"Gerenciamento de Branches","text":""},{"location":"git-github/comandos/#git-checkout","title":"git checkout","text":"<p>Descri\u00e7\u00e3o: Alterna entre branches ou cria nova branch.</p> <pre><code>git checkout nome-da-branch\n</code></pre> Varia\u00e7\u00f5es <pre><code>git checkout -b nome-da-nova-branch  # Cria e troca para nova branch\ngit checkout .  # Desfaz altera\u00e7\u00f5es n\u00e3o commitadas\n</code></pre>"},{"location":"git-github/comandos/#git-branch","title":"git branch","text":"<p>Descri\u00e7\u00e3o: Gerencia branches locais.</p> <pre><code>git branch  # Lista branches\ngit branch -d feature-x  # Deleta branch local\ngit push origin --delete &lt;nome-da-branch&gt; # Deleta branch remota\n</code></pre>"},{"location":"git-github/comandos/#git-merge","title":"git merge","text":"<p>Descri\u00e7\u00e3o: Integra altera\u00e7\u00f5es de uma branch \u00e0 atual.</p> <pre><code>git merge feature-branch\n</code></pre>"},{"location":"git-github/comandos/#git-rebase","title":"git rebase","text":"<p>Descri\u00e7\u00e3o: Reescreve hist\u00f3rico de commits.</p> <pre><code>git rebase main\n</code></pre> Varia\u00e7\u00f5es <pre><code>git rebase --abort  # Cancela rebase\ngit rebase --continue  # Continua ap\u00f3s resolver conflitos\n</code></pre> <p>\u26a0\ufe0f Cuidado: Nunca usar rebase em branches compartilhadas</p>"},{"location":"git-github/comandos/#trabalhando-com-alteracoes","title":"Trabalhando com Altera\u00e7\u00f5es","text":""},{"location":"git-github/comandos/#git-add","title":"git add","text":"<p>Descri\u00e7\u00e3o: Adiciona mudan\u00e7as ao staging.</p> <pre><code>git add .\n</code></pre> Varia\u00e7\u00f5es <pre><code>git add -p  # Adiciona interativamente\n\ngit add &lt;nome-do-arquivo&gt;  # Adiciona um arquivo espec\u00edfico\n</code></pre>"},{"location":"git-github/comandos/#git-commit","title":"git commit","text":"<p>Descri\u00e7\u00e3o: Salva snapshot do staging.</p> <pre><code>git commit -m \"feat: adiciona nova funcionalidade\"\n</code></pre> Varia\u00e7\u00f5es <pre><code>git commit --amend  # Edita \u00faltimo commit\n</code></pre>"},{"location":"git-github/comandos/#convencao-de-commits","title":"Conven\u00e7\u00e3o de Commits","text":"Tipo Uso feat: Nova funcionalidade fix: Corre\u00e7\u00e3o de bug docs: Documenta\u00e7\u00e3o ci: Mudan\u00e7as em CI/CD refactor: Refatora\u00e7\u00e3o sem mudan\u00e7a funcional"},{"location":"git-github/comandos/#boas-praticas-para-mensagens","title":"Boas Pr\u00e1ticas para Mensagens:","text":"<p>Comece com o tipo + : + espa\u00e7o (feat: , fix: , etc)</p> <p>Use verbo no imperativo (presente): \u2714\ufe0f \"adiciona\", \"corrige\", \"implementa\" \u274c \"adicionado\", \"corre\u00e7\u00e3o\", \"implementei\"</p> <p>Seja espec\u00edfico mas conciso: \u2714\ufe0f fix: corrige parsing de datas no formato ISO-8601 \u274c fix: arruma problema com datas</p> <p>Mencione o componente afetado: \u2714\ufe0f refactor: otimiza queries do m\u00f3dulo de relat\u00f3rios \u274c refactor: melhora performance</p>"},{"location":"git-github/comandos/#git-stash","title":"git stash","text":"<p>Descri\u00e7\u00e3o: Guarda temporariamente altera\u00e7\u00f5es.</p> <pre><code>git stash\n</code></pre> Varia\u00e7\u00f5es <pre><code>git stash pop  # Restaura \u00faltimo stash\ngit stash list  # Lista stashes\n</code></pre>"},{"location":"git-github/comandos/#sincronizacao-com-remoto","title":"Sincroniza\u00e7\u00e3o com Remoto","text":""},{"location":"git-github/comandos/#git-fetch","title":"git fetch","text":"<p>Descri\u00e7\u00e3o: Atualiza refer\u00eancias locais sobre o remoto.</p> <pre><code>git fetch origin\n</code></pre>"},{"location":"git-github/comandos/#git-pull","title":"git pull","text":"<p>Descri\u00e7\u00e3o: Sincroniza altera\u00e7\u00f5es remotas.</p> <pre><code>git pull --rebase origin main\n</code></pre>"},{"location":"git-github/comandos/#git-push","title":"git push","text":"<p>Descri\u00e7\u00e3o: Envia commits locais para remoto.</p> <pre><code>git push -u origin feature-x\n</code></pre> Varia\u00e7\u00f5es <pre><code>git push --force-with-lease  # Alternativa segura ao force push\ngit push origin :branch-to-delete  # Deleta branch remota\n</code></pre>"},{"location":"git-github/comandos/#git-remote","title":"git remote","text":"<p>Descri\u00e7\u00e3o: Gerencia conex\u00f5es remotas.</p> <pre><code>git remote -v  # Lista reposit\u00f3rios remotos\n</code></pre>"},{"location":"git-github/comandos/#sobrescrever-o-url-de-origin","title":"Sobrescrever o URL de \u201corigin\u201d","text":"<p>Descri\u00e7\u00e3o: Se voc\u00ea s\u00f3 precisa corrigir o endere\u00e7o de origin, use:</p> <pre><code>git remote set-url origin git@github.com:SEU-USUARIO/SEU-REPO.git\n</code></pre> <p>Isso muda o URL, sem precisar remover o remote. </p> <p>Lembre-se de subistituir &gt;&gt; 'SEU-USUARIO/SEU-REPO'</p>"},{"location":"git-github/comandos/#remover-e-recriar-o-origin","title":"Remover e recriar o \u201corigin\u201d","text":"<p>Se quiser partir de zero:</p> <pre><code>git remote remove origin\ngit remote add origin git@github.com:SEU-USUARIO/SEU-REPO.git\n</code></pre>"},{"location":"git-github/comandos/#correcoes-e-historico","title":"Corre\u00e7\u00f5es e Hist\u00f3rico","text":""},{"location":"git-github/comandos/#git-reset","title":"git reset","text":"<p>Descri\u00e7\u00e3o: Desfaz commits/altera\u00e7\u00f5es.</p> <pre><code>git reset --soft HEAD~1\n</code></pre>"},{"location":"git-github/comandos/#git-revert","title":"git revert","text":"<p>Descri\u00e7\u00e3o: Desfaz altera\u00e7\u00f5es com novo commit.</p> <pre><code>git revert abcd1234\n</code></pre>"},{"location":"git-github/comandos/#git-log","title":"git log","text":"<p>Descri\u00e7\u00e3o: Exibe hist\u00f3rico de commits.</p> <pre><code>git log --graph --oneline --all\n</code></pre>"},{"location":"git-github/comandos/#git-diff","title":"git diff","text":"<p>Descri\u00e7\u00e3o: Mostra diferen\u00e7as entre vers\u00f5es.</p> <pre><code>git diff --staged  # Altera\u00e7\u00f5es em staged\n</code></pre>"},{"location":"git-github/comandos/#workflow-devops","title":"Workflow DevOps","text":""},{"location":"git-github/comandos/#fluxo-de-trabalho-padrao","title":"Fluxo de Trabalho Padr\u00e3o","text":"<p>Passo a Passo</p> <p>Atualizar branch principal:</p> <pre><code>git checkout main\ngit pull --rebase\n</code></pre> <p>Criar feature branch:</p> <pre><code>git checkout -b feature/xyz\n</code></pre> <p>Desenvolver e commitar:</p> <pre><code>git add .\ngit commit -m \"feat: add feature xyz\"\n</code></pre> <p>Sincronizar com remote:</p> <pre><code>git push -u origin feature/xyz\n</code></pre> <p>Abrir Pull Request (GitHub UI)</p> <p>Ap\u00f3s merge:</p> <pre><code>git checkout main\ngit pull\ngit branch -d feature/xyz\n</code></pre>"},{"location":"git-github/comandos/#comandos-avancados","title":"Comandos Avan\u00e7ados","text":""},{"location":"git-github/comandos/#git-bisect","title":"git bisect","text":"<p>Descri\u00e7\u00e3o: Busca bin\u00e1ria para encontrar bug.</p> <pre><code>git bisect start\ngit bisect bad HEAD\ngit bisect good v1.0\n</code></pre>"},{"location":"git-github/comandos/#git-reflog","title":"git reflog","text":"<p>Descri\u00e7\u00e3o: Mostra hist\u00f3rico de refer\u00eancias.</p> <pre><code>git reflog  # Recupera branches/commits perdidos\n</code></pre> <p>Troubleshooting</p> <pre><code># Desfazer merge conflituoso:\ngit merge --abort\n\n# Limpar branches locais obsoletas:\ngit fetch -p &amp;&amp; git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D\n</code></pre>"},{"location":"git-github/comandos/#cherry-pick","title":"cherry-pick","text":"<p>Descri\u00e7\u00e3o: Copia um commit espec\u00edfico para a branch atual. \u00datil em hotfixes..</p> <pre><code>git cherry-pick &lt;commit&gt;\n</code></pre>"},{"location":"git-github/comandos/#boas-praticas-devops","title":"Boas Pr\u00e1ticas DevOps","text":""},{"location":"git-github/comandos/#anti-patterns","title":"\u274c Anti-Patterns","text":"<ul> <li>Commitar diretamente na main</li> <li>Force push em branches compartilhadas</li> <li>Mensagens gen\u00e9ricas (\"Update file\")</li> <li>Ignorar .gitignore (commitar secrets/tempor\u00e1rios)</li> </ul> <p>Documenta\u00e7\u00e3o atualizada em: 2025-06-04</p>"},{"location":"git-github/conceitos/","title":"Conceitos","text":"<p>Conceitos de Git e GitHub para Iniciantes</p> <p>Este documento apresenta os principais conceitos de Git e GitHub, voltado para quem est\u00e1 come\u00e7ando. O objetivo \u00e9 oferecer uma vis\u00e3o geral clara e pr\u00e1tica, facilitando o entendimento do fluxo de trabalho e da terminologia b\u00e1sica antes de partir para comandos espec\u00edficos.</p>"},{"location":"git-github/conceitos/#1-por-que-controle-de-versao","title":"1. Por que Controle de Vers\u00e3o?","text":"<ol> <li>Seguran\u00e7a no Hist\u00f3rico: </li> <li> <p>Cada altera\u00e7\u00e3o feita no projeto fica registrada. Se algo der errado, \u00e9 poss\u00edvel voltar a um ponto anterior.</p> </li> <li> <p>Colabora\u00e7\u00e3o Facilitada: </p> </li> <li> <p>Equipes podem trabalhar simultaneamente no mesmo c\u00f3digo sem sobrescrever o trabalho alheio.</p> </li> <li> <p>Rastreamento de Altera\u00e7\u00f5es: </p> </li> <li> <p>Quem fez o qu\u00ea e quando. Essencial para auditorias, revis\u00f5es de c\u00f3digo e entendimento de por que determinada mudan\u00e7a foi feita.</p> </li> <li> <p>Ramo para Experimenta\u00e7\u00e3o: </p> </li> <li>Cria-se \u201cbranches\u201d (ramifica\u00e7\u00f5es) para testar novas ideias sem afetar a linha principal de desenvolvimento.</li> </ol>"},{"location":"git-github/conceitos/#2-o-que-e-git","title":"2. O que \u00e9 Git?","text":"<ul> <li>Git \u00e9 um sistema de controle de vers\u00e3o distribu\u00eddo, criado por Linus Torvalds em 2005.  </li> <li>\u201cDistribu\u00eddo\u201d significa que cada desenvolvedor possui uma c\u00f3pia completa do reposit\u00f3rio (hist\u00f3rico, arquivos, branches) em sua pr\u00f3pria m\u00e1quina, e n\u00e3o depende exclusivamente de um servidor central.</li> </ul>"},{"location":"git-github/conceitos/#21-principais-caracteristicas-do-git","title":"2.1. Principais Caracter\u00edsticas do Git","text":"<ul> <li>Velocidade: opera\u00e7\u00f5es locais (como commits, diffs, hist\u00f3rico) s\u00e3o muito r\u00e1pidas porque acontecem no pr\u00f3prio computador.  </li> <li>Eficiente em Armazenamento: utiliza snapshots compactos e refer\u00eancias (hashes) para economizar espa\u00e7o.  </li> <li>Ramo (Branch) Leve: criar, alternar e mesclar branches no Git \u00e9 r\u00e1pido e consome poucos recursos.  </li> <li>Hist\u00f3rico Imut\u00e1vel: cada commit gera um identificador \u00fanico (SHA-1), garantindo que qualquer modifica\u00e7\u00e3o no conte\u00fado gere um hash diferente.</li> </ul>"},{"location":"git-github/conceitos/#3-estrutura-basica-de-um-repositorio-git","title":"3. Estrutura B\u00e1sica de um Reposit\u00f3rio Git","text":"<p>Ao trabalhar com Git, h\u00e1 tr\u00eas \u00e1reas principais que voc\u00ea, iniciante, deve conhecer:</p> <ol> <li>Diret\u00f3rio de Trabalho (Working Directory): </li> <li> <p>Cont\u00e9m todos os arquivos e pastas que voc\u00ea v\u00ea no sistema operacional. \u00c9 onde voc\u00ea cria, edita e exclui arquivos.</p> </li> <li> <p>\u00c1rea de Prepara\u00e7\u00e3o (Staging Area ou Index): </p> </li> <li> <p>Local onde o Git guarda temporariamente as mudan\u00e7as que voc\u00ea marcou para incluir no pr\u00f3ximo commit. Quando voc\u00ea faz <code>git add</code>, o Git copia altera\u00e7\u00f5es do diret\u00f3rio de trabalho para essa \u00e1rea.</p> </li> <li> <p>Reposit\u00f3rio Local (.git): </p> </li> <li>Diret\u00f3rio oculto <code>.git</code> na raiz do projeto. Armazena todo o hist\u00f3rico de commits, configura\u00e7\u00f5es e refer\u00eancias (branches, tags, objetos). Quando voc\u00ea faz <code>git commit</code>, as mudan\u00e7as da \u00e1rea de prepara\u00e7\u00e3o s\u00e3o salvas aqui como um novo snapshot.</li> </ol> <pre><code>[Working Directory] \u2192 git add \u2192 [Staging Area] \u2192 git commit \u2192 [Reposit\u00f3rio Local]\n</code></pre>"},{"location":"git-github/conceitos/#4-terminologia-essencial","title":"4. Terminologia Essencial","text":""},{"location":"git-github/conceitos/#41-commit","title":"4.1. Commit","text":"<ul> <li>O que \u00e9? </li> <li>Um \u201csnapshot\u201d do estado dos arquivos que estavam na \u00e1rea de prepara\u00e7\u00e3o. A cada commit, o Git registra um hash exclusivo (SHA-1), autor, mensagem e data.  </li> <li>Por que importa? </li> <li>Serve como ponto seguro para voltar caso algum erro aconte\u00e7a no futuro.</li> </ul>"},{"location":"git-github/conceitos/#42-branch-ramificacao","title":"4.2. Branch (Ramifica\u00e7\u00e3o)","text":"<ul> <li>O que \u00e9? </li> <li>Uma linha paralela de desenvolvimento. A branch <code>main</code> (ou <code>master</code>) geralmente representa a vers\u00e3o est\u00e1vel/prod. Outras branches podem ser criadas para desenvolver novas funcionalidades, corre\u00e7\u00f5es ou experimentos.  </li> <li>Por que importa? </li> <li>Permite que v\u00e1rias funcionalidades ou corre\u00e7\u00f5es sejam desenvolvidas simultaneamente sem interferir na linha principal (<code>main</code>).</li> </ul>"},{"location":"git-github/conceitos/#43-head","title":"4.3. HEAD","text":"<ul> <li>O que \u00e9? </li> <li>Um ponteiro que aponta para o commit atual em que voc\u00ea est\u00e1 trabalhando (tipicamente na ponta de uma branch).  </li> <li>Por que importa? </li> <li>Indica o \u201cestado\u201d atual do reposit\u00f3rio; quando voc\u00ea muda de branch, o HEAD \u201cmuda\u201d de lugar.</li> </ul>"},{"location":"git-github/conceitos/#44-remote-remoto","title":"4.4. Remote (Remoto)","text":"<ul> <li>O que \u00e9? </li> <li>Refer\u00eancia a um reposit\u00f3rio que n\u00e3o est\u00e1 no seu disco local, mas sim em outro servidor (por exemplo, GitHub). O nome padr\u00e3o costuma ser <code>origin</code>.  </li> <li>Por que importa? </li> <li>Permite compartilhar c\u00f3digo com outros desenvolvedores, fazer backup ou implantar em servidores.</li> </ul>"},{"location":"git-github/conceitos/#45-merge-mesclagem","title":"4.5. Merge (Mesclagem)","text":"<ul> <li>O que \u00e9? </li> <li>Opera\u00e7\u00e3o que integra mudan\u00e7as de uma branch (por exemplo <code>feature-x</code>) na branch atual (por exemplo <code>main</code>).  </li> <li>Por que importa? </li> <li>Une diferentes linhas de trabalho. O Git tentar\u00e1 mesclar automaticamente, mas pode surgir conflito se o mesmo trecho foi alterado em ambas as branches.</li> </ul>"},{"location":"git-github/conceitos/#46-rebase","title":"4.6. Rebase","text":"<ul> <li>O que \u00e9? </li> <li>Alternativa ao merge que \u201crebasa\u201d (reaplica) commits de uma branch sobre outra, criando um hist\u00f3rico linear.  </li> <li>Por que importa? </li> <li>Facilita a leitura do hist\u00f3rico, mas cuidado: reescrever hist\u00f3rico de branches j\u00e1 compartilhadas pode causar problemas ao sincronizar com o remoto.</li> </ul>"},{"location":"git-github/conceitos/#5-fluxo-basico-de-trabalho-workflow","title":"5. Fluxo B\u00e1sico de Trabalho (Workflow)","text":"<p>Para quem est\u00e1 come\u00e7ando, o fluxo mais simples \u00e9:</p> <ol> <li>Inicializar um Reposit\u00f3rio Local </li> </ol> <p><code>bash    git init</code>    - Ap\u00f3s esse comando, um diret\u00f3rio oculto <code>.git</code> \u00e9 criado, transformando a pasta atual em um reposit\u00f3rio Git.</p> <ol> <li>Configurar Usu\u00e1rio e Email (uma \u00fanica vez) <code>bash    git config --global user.name \"Seu Nome\"    git config --global user.email \"seu.email@exemplo.com\"</code></li> <li> <p>Essas informa\u00e7\u00f5es aparecem em cada commit e indicam quem fez a mudan\u00e7a.</p> </li> <li> <p>Adicionar Arquivos no Diret\u00f3rio de Trabalho </p> </li> <li> <p>Crie/modifique arquivos normalmente (ex.: <code>index.html</code>, <code>app.js</code>, <code>README.md</code> etc.).</p> </li> <li> <p>Verificar Estado Atual (git status) <code>bash    git status</code></p> </li> <li> <p>Indica quais arquivos foram modificados e quais ainda n\u00e3o foram adicionados na \u00e1rea de prepara\u00e7\u00e3o.</p> </li> <li> <p>Staging (git add) <code>bash    git add .</code></p> </li> <li> <p>Copia todas as mudan\u00e7as rastreadas para a \u00e1rea de prepara\u00e7\u00e3o (staging). Voc\u00ea tamb\u00e9m pode adicionar arquivos espec\u00edficos: <code>bash      git add arquivo.txt</code></p> </li> <li> <p>Fazer o Commit (git commit) <code>bash    git commit -m \"mensagem descritiva sobre a mudan\u00e7a\"</code></p> </li> <li> <p>Salva um snapshot dessas mudan\u00e7as no reposit\u00f3rio local. A mensagem deve ser curta e clara, explicando o que foi alterado e por qu\u00ea.</p> </li> <li> <p>Criar/Alternar Branches (quando necess\u00e1rio)  </p> </li> <li>Para criar: <code>bash      git branch feature/novo-recurso</code></li> <li>Para alternar: <code>bash      git checkout feature/novo-recurso</code></li> <li> <p>Ou em um \u00fanico passo: <code>bash      git checkout -b feature/novo-recurso</code></p> </li> <li> <p>Mesclar Branches </p> </li> <li>Antes de mesclar, volte para a branch de destino (por exemplo, <code>main</code>): <code>bash      git checkout main</code></li> <li>Em seguida, fa\u00e7a merge: <code>bash      git merge feature/novo-recurso</code></li> <li> <p>Resolva conflitos (se houver) e finalize a mesclagem.</p> </li> <li> <p>Conectar ao Reposit\u00f3rio Remoto (GitHub) </p> </li> <li>No GitHub, crie um reposit\u00f3rio vazio. Copie o link SSH ou HTTPS.  </li> <li> <p>Adicione como remote: <code>bash      git remote add origin git@github.com:seu-usuario/seu-repositorio.git</code></p> </li> <li> <p>Enviar (Push) para o Remoto <code>bash     git push -u origin main</code></p> <ul> <li>O <code>-u</code> configura a branch <code>main</code> local para rastrear a branch <code>main</code> no servidor remoto. Nos pushes futuros, basta usar <code>git push</code>.</li> </ul> </li> <li> <p>Atualizar (Pull) do Remoto <code>bash     git pull origin main</code></p> <ul> <li>Traz altera\u00e7\u00f5es do reposit\u00f3rio remoto para a sua c\u00f3pia local, mesclando-as automaticamente (ou via rebase, se configurado assim).</li> </ul> </li> </ol>"},{"location":"git-github/conceitos/#6-o-que-e-github","title":"6. O que \u00e9 GitHub?","text":"<ul> <li>GitHub \u00e9 uma plataforma hospedada na nuvem que serve para armazenar, colaborar e gerenciar projetos Git.  </li> <li>Al\u00e9m de hospedar reposit\u00f3rios, oferece funcionalidades como Issues, Pull Requests, Actions (CI/CD), Pages (site est\u00e1tico), wikis e muito mais.</li> </ul>"},{"location":"git-github/conceitos/#61-conceitos-de-github","title":"6.1. Conceitos de GitHub","text":"<ol> <li>Reposit\u00f3rio (Repository/Repo) </li> <li> <p>\u00c9 o local (diret\u00f3rio) onde ficam todos os arquivos do projeto e seu hist\u00f3rico de vers\u00f5es. No GitHub, cada reposit\u00f3rio tem:  </p> <ul> <li>C\u00f3digo-fonte  </li> <li>Issues (para rastrear tarefas e bugs)  </li> <li>Pull Requests (para revis\u00e3o de c\u00f3digo)  </li> <li>Wiki (documenta\u00e7\u00e3o adicional)  </li> <li>Releases (pacotes bin\u00e1rios, changelog etc.)</li> </ul> </li> <li> <p>Fork </p> </li> <li>C\u00f3pia \u201cindependente\u201d de um reposit\u00f3rio de outra pessoa na sua conta.  </li> <li> <p>Permite que voc\u00ea fa\u00e7a experimentos ou contribui\u00e7\u00f5es sem afetar o projeto original.</p> </li> <li> <p>Clone </p> </li> <li> <p>Copiar um reposit\u00f3rio GitHub para sua m\u00e1quina local: <code>bash      git clone https://github.com/usuario/repositorio.git</code></p> </li> <li> <p>Pull Request (PR) </p> </li> <li>Mecanismo para solicitar que altera\u00e7\u00f5es feitas em uma branch (geralmente de um fork ou de uma branch do mesmo reposit\u00f3rio) sejam revisadas e mescladas no reposit\u00f3rio de destino (por exemplo, <code>main</code>).  </li> <li> <p>Normalmente envolve coment\u00e1rio, revis\u00e3o de c\u00f3digo por outros colaboradores e poss\u00edvel integra\u00e7\u00e3o autom\u00e1tica (CI/CD).</p> </li> <li> <p>Issue </p> </li> <li>Ferramenta de rastreamento de tarefas, bugs, melhorias ou d\u00favidas.  </li> <li> <p>Pode ser atribu\u00edda a pessoas, rotulada (labels) e associada a milestones.</p> </li> <li> <p>Branch Protection Rules </p> </li> <li> <p>Configura\u00e7\u00e3o no GitHub que impede pushes diretos, exige revis\u00f5es de c\u00f3digo, aprova\u00e7\u00e3o de testes de CI etc., antes de permitir merges em branches como <code>main</code> ou <code>develop</code>.</p> </li> <li> <p>GitHub Actions </p> </li> <li>Sistema de CI/CD integrado para automatizar:  <ul> <li>Testes automatizados  </li> <li>Linting e verifica\u00e7\u00e3o de seguran\u00e7a  </li> <li>Deploy autom\u00e1tico  </li> <li>Gera\u00e7\u00e3o de releases e documenta\u00e7\u00e3o  </li> </ul> </li> <li>Funciona com arquivos de workflow em YAML na pasta <code>.github/workflows/</code>.</li> </ol>"},{"location":"git-github/conceitos/#7-fluxo-de-contribuicao-basico-no-github","title":"7. Fluxo de Contribui\u00e7\u00e3o B\u00e1sico no GitHub","text":"<ol> <li>Encontrar ou Criar um Reposit\u00f3rio </li> <li> <p>Caso o projeto seja de outra pessoa, voc\u00ea pode:  </p> <ul> <li>Forkar o reposit\u00f3rio para sua pr\u00f3pria conta  </li> <li>Clonar diretamente se tiver permiss\u00e3o de escrita (colaborador)</li> </ul> </li> <li> <p>Criar uma Branch Local </p> </li> <li> <p>Nunca trabalhe diretamente na <code>main</code> de reposit\u00f3rios p\u00fablicos. Crie uma branch para sua tarefa/feature: <code>bash      git checkout -b minha-branch</code></p> </li> <li> <p>Desenvolver Localmente </p> </li> <li> <p>Fazer altera\u00e7\u00f5es, commits at\u00f4micos e mensur\u00e1veis. Use conven\u00e7\u00f5es de commit para facilitar a revis\u00e3o.</p> </li> <li> <p>Sincronizar com o Reposit\u00f3rio de Origem (Upstream) </p> </li> <li>Ao colaborar em forks, a \u201corigem\u201d (<code>origin</code>) aponta para o seu fork. \u00c9 importante adicionar o reposit\u00f3rio original como \u201cupstream\u201d para receber mudan\u00e7as: <code>bash      git remote add upstream https://github.com/usuario-original/repositorio.git</code></li> <li> <p>Para atualizar sua c\u00f3pia: <code>bash      git fetch upstream      git checkout main      git merge upstream/main      # ou git rebase upstream/main</code></p> </li> <li> <p>Enviar (Push) para o Fork/Branch Remota <code>bash    git push -u origin minha-branch</code></p> </li> <li> <p>Abrir um Pull Request no GitHub </p> </li> <li>Acesse a interface do GitHub no reposit\u00f3rio original e clique em \u201cNew Pull Request\u201d.  </li> <li>Selecione a branch de destino (geralmente <code>main</code>) e a branch de origem (sua feature).  </li> <li> <p>Preencha t\u00edtulo, descri\u00e7\u00e3o clara do objetivo e, se houver, link para issues relacionadas.</p> </li> <li> <p>Aguardar Revis\u00e3o e Feedback </p> </li> <li>Mantenha-se dispon\u00edvel para responder coment\u00e1rios, ajustar c\u00f3digo ou esclarecer d\u00favidas.  </li> <li> <p>Fa\u00e7a commits adicionais na mesma branch se for necess\u00e1rio mudar algo no PR.</p> </li> <li> <p>Merge do Pull Request </p> </li> <li>Ap\u00f3s aprova\u00e7\u00e3o, o pull request \u00e9 mesclado (merge) pelo mantenedor/propriet\u00e1rio.  </li> <li> <p>Pode-se usar diferentes estrat\u00e9gias de merge (Merge Commit, Squash Merge, Rebase &amp; Merge) conforme pol\u00edtica do projeto.</p> </li> <li> <p>Atualizar seu Fork Local </p> </li> <li>Depois que o PR for mesclado, volte ao seu reposit\u00f3rio local, atualize a branch <code>main</code> e remova branches obsoletas: <code>bash      git fetch upstream      git checkout main      git merge upstream/main   # ou rebase      git push origin main      # manter seu fork sincronizado      git branch -d minha-branch</code></li> </ol>"},{"location":"git-github/conceitos/#8-diferencas-entre-git-e-github","title":"8. Diferen\u00e7as Entre Git e GitHub","text":"Aspecto Git GitHub Natureza Ferramenta de controle de vers\u00e3o distribu\u00eddo (CLI/arquivos) Plataforma de hospedagem de reposit\u00f3rios Git, com funcionalidades colaborativas Onde roda Localmente (computador do desenvolvedor) No servidor (nuvem), interface web, API e integra\u00e7\u00e3o com ferramentas externas Responsabilidade Gerenciar hist\u00f3rico de commits, branches, merges Armazenar remotos, controlar acesso, fornecer issues, pull requests e CI/CD Exemplo <code>git commit</code>, <code>git branch</code>, <code>git merge</code> Criar PRs, configurar GitHub Actions, gerenciar equipes, issues e wikis"},{"location":"git-github/conceitos/#9-glossario-termos-comuns","title":"9. Gloss\u00e1rio (Termos Comuns)","text":"<ul> <li>Commit SHA: Identificador \u00fanico (hash) de cada commit.  </li> <li>HEAD: Ponteiro para o commit atual em que voc\u00ea est\u00e1 trabalhando.  </li> <li>Branch (Ramifica\u00e7\u00e3o): Linha paralela de desenvolvimento.  </li> <li>Tag: Marcador fixo em um commit, normalmente usado para indicar releases.  </li> <li>Remote (Remoto): Reposit\u00f3rio hospedado em outro servidor (ex.: GitHub).  </li> <li>Fork: C\u00f3pia independente de um reposit\u00f3rio em outra conta.  </li> <li>Clone: C\u00f3pia local de um reposit\u00f3rio remoto.  </li> <li>Pull Request (PR): Solicita\u00e7\u00e3o de mesclagem de mudan\u00e7as de uma branch/usu\u00e1rio para o reposit\u00f3rio de destino.  </li> <li>Issue: Registro de tarefa, bug ou melhoria, podendo ser atribu\u00eddo e categorizado.  </li> <li>Review (Revis\u00e3o de C\u00f3digo): Processo de analisar altera\u00e7\u00f5es propostas antes do merge.  </li> <li>Merge Conflict: Conflito que ocorre quando o Git n\u00e3o consegue mesclar automaticamente duas altera\u00e7\u00f5es que afetaram a mesma parte de um arquivo.  </li> <li>Fork + Pull Model (Modelo GitHub): Fluxo em que um usu\u00e1rio faz fork de um projeto, altera em sua pr\u00f3pria c\u00f3pia e envia PR para o projeto original.</li> </ul>"},{"location":"git-github/conceitos/#10-dicas-rapidas-para-quem-esta-comecando","title":"10. Dicas R\u00e1pidas para Quem Est\u00e1 Come\u00e7ando","text":"<ol> <li>Pratique em um Projeto Pessoal Pequeno </li> <li> <p>Crie um reposit\u00f3rio simples (pode ser um blog est\u00e1tico ou um mini script) e fa\u00e7a commits peri\u00f3dicos para entender o fluxo.</p> </li> <li> <p>Leia a Documenta\u00e7\u00e3o Oficial (em Portugu\u00eas) </p> </li> <li>Git: https://git-scm.com/book/pt-br/v2  </li> <li> <p>GitHub Guides: https://guides.github.com/activities/hello-world/</p> </li> <li> <p>Use Interfaces Gr\u00e1ficas (GUI) no In\u00edcio </p> </li> <li> <p>Ferramentas como GitHub Desktop, Sourcetree ou GitKraken tornam mais visual o processo de commits, branches e merge. Conforme for evoluindo, avance para a linha de comando.</p> </li> <li> <p>Familiarize-se com <code>git status</code> e <code>git log</code> </p> </li> <li> <p>Esses dois comandos sozinhos j\u00e1 resolvem 80% das d\u00favidas sobre estados de arquivos e hist\u00f3rico.</p> </li> <li> <p>Crie Arquivo <code>.gitignore</code> Desde o In\u00edcio </p> </li> <li> <p>Evita que arquivos desnecess\u00e1rios (bin\u00e1rios, logs, depend\u00eancias locais) sejam enviados ao reposit\u00f3rio. Exemplo m\u00ednimo de <code>.gitignore</code> para projetos Node.js: <code>node_modules/      .env      dist/      coverage/</code></p> </li> <li> <p>Fa\u00e7a Branches para Cada Nova Funcionalidade </p> </li> <li> <p>Evita confus\u00e3o ao trabalhar em v\u00e1rias tarefas ao mesmo tempo e facilita abrir pull requests focados.</p> </li> <li> <p>Escreva Mensagens de Commit Claras </p> </li> <li> <p>At\u00e9 para voc\u00ea mesmo \u00e9 mais f\u00e1cil entender um hist\u00f3rico bem documentado. Use verbos no imperativo e descreva o \u201cporqu\u00ea\u201d al\u00e9m do \u201co qu\u00ea\u201d foi feito.</p> </li> <li> <p>Teste Antes de Fazer Push </p> </li> <li> <p>Se o projeto possui testes automatizados, rode-os localmente para garantir que n\u00e3o vai quebrar a build do reposit\u00f3rio remoto nem causar falhas na CI.</p> </li> <li> <p>Resolva Conflitos com Calma </p> </li> <li> <p>Quando acontecerem conflitos de merge, abra o arquivo, localize as marca\u00e7\u00f5es (<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>) e escolha a vers\u00e3o correta, ap\u00f3s isso finalize: <code>bash      git add arquivo-com-conflito      git commit  # se o commit n\u00e3o foi criado automaticamente</code></p> </li> <li> <p>Aprenda a Reverter com Seguran\u00e7a </p> <ul> <li>Para desfazer modifica\u00e7\u00f5es que ainda n\u00e3o foram comitadas: <code>bash   git restore &lt;arquivo&gt;   # descarta altera\u00e7\u00f5es locais</code></li> <li>Para remover o commit mais recente (mantendo altera\u00e7\u00f5es no stage): <code>bash   git reset --soft HEAD~1</code></li> </ul> </li> </ol>"},{"location":"git-github/conceitos/#11-proximos-passos","title":"11. Pr\u00f3ximos Passos","text":"<ol> <li>Explorar Documenta\u00e7\u00f5es Avan\u00e7adas </li> <li>Branching strategies (GitFlow, GitHub Flow, Trunk Based Development).  </li> <li> <p>Workflows de integra\u00e7\u00e3o cont\u00ednua com GitHub Actions, GitLab CI, Jenkins etc.</p> </li> <li> <p>Aprofundar em Workflows de Time </p> </li> <li>Como gerenciar code reviews, pull request templates, PR assignees e labels.  </li> <li> <p>Pr\u00e1ticas de \u201cpair programming\u201d em branches remotas via Codespaces ou Visual Studio Live Share.</p> </li> <li> <p>Descobrir Ferramentas Auxiliares </p> </li> <li>GPG para assinar commits.  </li> <li>LFS (Large File Storage) para grandes bin\u00e1rios.  </li> <li> <p>Hooks personalizados (<code>.git/hooks</code>) para automa\u00e7\u00f5es locais.</p> </li> <li> <p>Gerenciar Releases e Vers\u00f5es </p> </li> <li>Adotar Semantic Versioning (SemVer).  </li> <li>Automatizar gera\u00e7\u00e3o de changelogs com base em conven\u00e7\u00e3o de commits (Ex.: Conventional Commits + semantic-release).</li> </ol> <p>Parab\u00e9ns por chegar at\u00e9 aqui! Agora voc\u00ea conhece os conceitos fundamentais de Git e GitHub e est\u00e1 pronto para criar seus pr\u00f3prios reposit\u00f3rios, colaborar em projetos de outras pessoas e avan\u00e7ar em fluxos de trabalho mais complexos. \u00c0 medida que ganhar pr\u00e1tica, o Git se tornar\u00e1 uma ferramenta natural na sua rotina de desenvolvimento. Bom aprendizado!</p>"},{"location":"github-actions/exemplos/","title":"Conteudo em breve!!!","text":""},{"location":"kubernetes/conceitos/","title":"Conteudo em breve!!!","text":""},{"location":"linux/comandos/","title":"Conteudo em breve!!!","text":""},{"location":"redes/conceitos/","title":"Conteudo em breve!!!","text":""}]}